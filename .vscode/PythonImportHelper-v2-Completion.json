[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "Bid",
        "importPath": "auctions.models",
        "description": "auctions.models",
        "isExtraImport": true,
        "detail": "auctions.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "auctions.models",
        "description": "auctions.models",
        "isExtraImport": true,
        "detail": "auctions.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "auctions.migrations.0001_initial",
        "description": "auctions.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "auctions.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "auctions.migrations.0002_listing_watchlist",
        "description": "auctions.migrations.0002_listing_watchlist",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auctions', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='listing',\n            name='watchlist',\n            field=models.ManyToManyField(blank=True, null=True, related_name='listingWatchlist', to=settings.AUTH_USER_MODEL),\n        ),",
        "detail": "auctions.migrations.0002_listing_watchlist",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "auctions.migrations.0003_alter_listing_owner_comment",
        "description": "auctions.migrations.0003_alter_listing_owner_comment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auctions', '0002_listing_watchlist'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='listing',\n            name='owner',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='userComments', to=settings.AUTH_USER_MODEL),\n        ),",
        "detail": "auctions.migrations.0003_alter_listing_owner_comment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "auctions.migrations.0004_bid_alter_listing_price",
        "description": "auctions.migrations.0004_bid_alter_listing_price",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auctions', '0003_alter_listing_owner_comment'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bid',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('bid', models.FloatField(default=0)),",
        "detail": "auctions.migrations.0004_bid_alter_listing_price",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "auctions.migrations.0005_alter_bid_bid",
        "description": "auctions.migrations.0005_alter_bid_bid",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auctions', '0004_bid_alter_listing_price'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bid',\n            name='bid',\n            field=models.IntegerField(default=0),\n        ),",
        "detail": "auctions.migrations.0005_alter_bid_bid",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "auctions.migrations.0006_remove_listing_imageurl_listing_imageurl",
        "description": "auctions.migrations.0006_remove_listing_imageurl_listing_imageurl",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auctions', '0005_alter_bid_bid'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='listing',\n            name='imageUrl',\n        ),\n        migrations.AddField(",
        "detail": "auctions.migrations.0006_remove_listing_imageurl_listing_imageurl",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "auctions.migrations.0007_comment_timestamp",
        "description": "auctions.migrations.0007_comment_timestamp",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auctions', '0006_remove_listing_imageurl_listing_imageurl'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='comment',\n            name='timestamp',\n            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),\n            preserve_default=False,",
        "detail": "auctions.migrations.0007_comment_timestamp",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "auctions.migrations.0008_alter_listing_imageurl",
        "description": "auctions.migrations.0008_alter_listing_imageurl",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auctions', '0007_comment_timestamp'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='listing',\n            name='imageURL',\n            field=models.CharField(blank=True, max_length=1000, null=True),\n        ),",
        "detail": "auctions.migrations.0008_alter_listing_imageurl",
        "documentation": {}
    },
    {
        "label": "app_config",
        "kind": 5,
        "importPath": "auctions.admin",
        "description": "auctions.admin",
        "peekOfCode": "app_config = apps.get_app_config('auctions') \nmodels = app_config.get_models()\nfor model in models:\n    try:\n        admin.site.register(model)\n    except admin.sites.AlreadyRegistered:\n        pass\"\"\"\nadmin.site.register(User)\nadmin.site.register(Category)\nadmin.site.register(Listing)",
        "detail": "auctions.admin",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 5,
        "importPath": "auctions.admin",
        "description": "auctions.admin",
        "peekOfCode": "models = app_config.get_models()\nfor model in models:\n    try:\n        admin.site.register(model)\n    except admin.sites.AlreadyRegistered:\n        pass\"\"\"\nadmin.site.register(User)\nadmin.site.register(Category)\nadmin.site.register(Listing)\nadmin.site.register(Comment)",
        "detail": "auctions.admin",
        "documentation": {}
    },
    {
        "label": "AuctionsConfig",
        "kind": 6,
        "importPath": "auctions.apps",
        "description": "auctions.apps",
        "peekOfCode": "class AuctionsConfig(AppConfig):\n    name = 'auctions'",
        "detail": "auctions.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "auctions.models",
        "description": "auctions.models",
        "peekOfCode": "class User(AbstractUser):\n    pass\nclass Category(models.Model):\n    categoryName = models.CharField(max_length=45)\n    def __str__(self):\n        return self.categoryName\nclass Bid(models.Model):\n    bid = models.IntegerField(default=0)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True, related_name=\"userBid\")\nclass Listing(models.Model):",
        "detail": "auctions.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "auctions.models",
        "description": "auctions.models",
        "peekOfCode": "class Category(models.Model):\n    categoryName = models.CharField(max_length=45)\n    def __str__(self):\n        return self.categoryName\nclass Bid(models.Model):\n    bid = models.IntegerField(default=0)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True, related_name=\"userBid\")\nclass Listing(models.Model):\n    title = models.CharField(max_length=20)\n    description = models.CharField(max_length= 400)",
        "detail": "auctions.models",
        "documentation": {}
    },
    {
        "label": "Bid",
        "kind": 6,
        "importPath": "auctions.models",
        "description": "auctions.models",
        "peekOfCode": "class Bid(models.Model):\n    bid = models.IntegerField(default=0)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True, related_name=\"userBid\")\nclass Listing(models.Model):\n    title = models.CharField(max_length=20)\n    description = models.CharField(max_length= 400)\n    imageURL = models.CharField(max_length=1000, null=True, blank=True)\n    price = models.ForeignKey(Bid, on_delete=models.CASCADE, blank=True, null=True, related_name=\"bidPrice\")\n    isActive = models.BooleanField(default=True)\n    owner = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True, related_name=\"userComments\")",
        "detail": "auctions.models",
        "documentation": {}
    },
    {
        "label": "Listing",
        "kind": 6,
        "importPath": "auctions.models",
        "description": "auctions.models",
        "peekOfCode": "class Listing(models.Model):\n    title = models.CharField(max_length=20)\n    description = models.CharField(max_length= 400)\n    imageURL = models.CharField(max_length=1000, null=True, blank=True)\n    price = models.ForeignKey(Bid, on_delete=models.CASCADE, blank=True, null=True, related_name=\"bidPrice\")\n    isActive = models.BooleanField(default=True)\n    owner = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True, related_name=\"userComments\")\n    category = models.ForeignKey(Category, on_delete=models.CASCADE, blank=True, null=True, related_name=\"category\")\n    watchlist = models.ManyToManyField(User, blank=True, null=True, related_name=\"listingWatchlist\")\n    def __str__(self):",
        "detail": "auctions.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "auctions.models",
        "description": "auctions.models",
        "peekOfCode": "class Comment(models.Model):\n    author = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True, related_name=\"user\")\n    listing = models.ForeignKey(Listing, on_delete=models.CASCADE, blank=True, null=True, related_name=\"listing\")\n    message = models.CharField(max_length=300)\n    timestamp = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.author} comment on {self.listing}\"",
        "detail": "auctions.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "auctions.urls",
        "description": "auctions.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n    path(\"login\", views.login_view, name=\"login\"),\n    path(\"logout\", views.logout_view, name=\"logout\"),\n    path(\"register\", views.register, name=\"register\"),\n    path(\"create\", views.createListing, name=\"create\"),\n    path(\"showCategory\", views.showCategory, name=\"showCategory\"),\n    path(\"listing/<int:id>\", views.listing, name=\"listing\"),\n    path(\"addWatchlist/<int:id>\", views.addWatchlist, name=\"addWatchlist\"),\n    path(\"removeWatchlist/<int:id>\", views.removeWatchlist, name=\"removeWatchlist\"),",
        "detail": "auctions.urls",
        "documentation": {}
    },
    {
        "label": "listing",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def listing(request, id):\n    listingData = Listing.objects.get(pk=id)\n    isListingInWatchlist = request.user in listingData.watchlist.all()\n    allComments = Comment.objects.filter(listing=listingData)\n    isOwner = request.user.username == listingData.owner.username\n    return render(request, \"auctions/listing.html\", {\n        \"listing\": listingData,\n        \"isListingInWatchlist\": isListingInWatchlist,\n        \"allComments\": allComments,\n        \"isOwner\" : isOwner",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "closeAuction",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def closeAuction(request, id):\n    listingData = Listing.objects.get(pk=id)\n    listingData.isActive = False\n    listingData.save()\n    isListingInWatchlist = request.user in listingData.watchlist.all()\n    allComments = Comment.objects.filter(listing=listingData)\n    isOwner = request.user.username == listingData.owner.username\n    return render(request, \"auctions/listing.html\", {\n        \"listing\": listingData,\n        \"isListingInWatchlist\": isListingInWatchlist,",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "addBid",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def addBid(request, id):\n    newBid = request.POST['newBid']\n    listingData = Listing.objects.get(pk=id)\n    isListingInWatchlist = request.user in listingData.watchlist.all()\n    allComments = Comment.objects.filter(listing=listingData)\n    isOwner = request.user.username == listingData.owner.username\n    if int(newBid) > listingData.price.bid:\n        updateBid = Bid(user=request.user, bid=int(newBid))\n        updateBid.save()\n        listingData.price = updateBid",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "addComment",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def addComment(request, id):\n    currentUser = request.user\n    listingData = Listing.objects.get(pk=id)\n    message = request.POST['newComment']\n    newComment = Comment(\n        author=currentUser,\n        listing=listingData,\n        message=message\n    )\n    newComment.save()",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "watchlist",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def watchlist(request):\n    currentUser = request.user\n    listings = currentUser.listingWatchlist.all()\n    return render(request, \"auctions/watchlist.html\", {\n        \"listings\": listings\n    }) \ndef removeWatchlist(request, id):\n    listingData = Listing.objects.get(pk=id)\n    currentUser = request.user\n    listingData.watchlist.remove(currentUser)",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "removeWatchlist",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def removeWatchlist(request, id):\n    listingData = Listing.objects.get(pk=id)\n    currentUser = request.user\n    listingData.watchlist.remove(currentUser)\n    return HttpResponseRedirect(reverse(\"listing\",args=(id, )))\ndef addWatchlist(request, id):\n    listingData = Listing.objects.get(pk=id)\n    currentUser = request.user\n    listingData.watchlist.add(currentUser)\n    return HttpResponseRedirect(reverse(\"listing\",args=(id, )))",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "addWatchlist",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def addWatchlist(request, id):\n    listingData = Listing.objects.get(pk=id)\n    currentUser = request.user\n    listingData.watchlist.add(currentUser)\n    return HttpResponseRedirect(reverse(\"listing\",args=(id, )))\ndef index(request):\n    activeListings = Listing.objects.filter(isActive=True)\n    allCategories = Category.objects.all()\n    return render(request, \"auctions/index.html\", {\n        \"listings\":activeListings,",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def index(request):\n    activeListings = Listing.objects.filter(isActive=True)\n    allCategories = Category.objects.all()\n    return render(request, \"auctions/index.html\", {\n        \"listings\":activeListings,\n        \"categories\":allCategories,\n    })\ndef showCategory(request):\n    if request.method == \"POST\":\n        categoryFromForm = request.POST['category']",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "showCategory",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def showCategory(request):\n    if request.method == \"POST\":\n        categoryFromForm = request.POST['category']\n        category = Category.objects.get(categoryName=categoryFromForm)\n        activeListings = Listing.objects.filter(isActive=True, category=category)\n        allCategories = Category.objects.all()\n        return render(request, \"auctions/index.html\", {\n            \"listings\":activeListings,\n            \"categories\":allCategories,\n        })",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "createListing",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def createListing(request):\n    if request.method == \"GET\":\n        allCategories = Category.objects.all()\n        return render(request, \"auctions/create.html\", {\n            \"categories\":allCategories\n        })\n    else:\n        #Get data from the form\n        title = request.POST[\"title\"]\n        description = request.POST[\"description\"]",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def login_view(request):\n    if request.method == \"POST\":\n        # Attempt to sign user in\n        username = request.POST[\"username\"]\n        password = request.POST[\"password\"]\n        user = authenticate(request, username=username, password=password)\n        # Check if authentication successful\n        if user is not None:\n            login(request, user)\n            return HttpResponseRedirect(reverse(\"index\"))",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return HttpResponseRedirect(reverse(\"index\"))\ndef register(request):\n    if request.method == \"POST\":\n        username = request.POST[\"username\"]\n        email = request.POST[\"email\"]\n        # Ensure password matches confirmation\n        password = request.POST[\"password\"]\n        confirmation = request.POST[\"confirmation\"]",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "auctions.views",
        "description": "auctions.views",
        "peekOfCode": "def register(request):\n    if request.method == \"POST\":\n        username = request.POST[\"username\"]\n        email = request.POST[\"email\"]\n        # Ensure password matches confirmation\n        password = request.POST[\"password\"]\n        confirmation = request.POST[\"confirmation\"]\n        if password != confirmation:\n            return render(request, \"auctions/register.html\", {\n                \"message\": \"Passwords must match.\"",
        "detail": "auctions.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "commerce.asgi",
        "description": "commerce.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "commerce.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '6ps8j!crjgrxt34cqbqn7x&b3y%(fny8k8nh21+qa)%ws3fh!q'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "SECRET_KEY = '6ps8j!crjgrxt34cqbqn7x&b3y%(fny8k8nh21+qa)%ws3fh!q'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'auctions',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'auctions',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'auctions',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'auctions',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'commerce.urls'",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "ROOT_URLCONF = 'commerce.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "WSGI_APPLICATION = 'commerce.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nAUTH_USER_MODEL = 'auctions.User'",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nAUTH_USER_MODEL = 'auctions.User'\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'auctions.User'\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "commerce.settings",
        "description": "commerce.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]",
        "detail": "commerce.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "commerce.urls",
        "description": "commerce.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"auctions.urls\"))\n]",
        "detail": "commerce.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "commerce.wsgi",
        "description": "commerce.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "commerce.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'commerce.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc",
        "detail": "manage",
        "documentation": {}
    }
]